type User {
  _id: String!
  name: String!
  email: String!
  picture: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type HabitDefinition {
  _id: String!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type HabitRepeat {
  on: [RepeatOn]
  every: Int!
  interval: RepeatInterval!
}

type HabitGoal {
  count: Int!
  repeat: HabitRepeat!
  reminder: String
}

enum RepeatOn {
  Sat
  Sun
  Mon
  Tue
  Wed
  Thu
  Fri
}

enum RepeatInterval {
  day
  week
  month
  year
}

type HabitInstance {
  _id: String!
  habitDefinitionId: String!
  goal: HabitGoal!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type GeneralResponse {
  message: String!
}

type HabitStats {
  totalCount: Float!
  streak: Int!
  score: Float!
}

scalar DateTime

input CreateHabitDefinitionInput {
  name: String!
  is_shared: Boolean!
}

input CreateHabitInstanceInput {
  habitDefinitionId: String!
  goal: HabitGoalInput!
}

input HabitRepeatInput {
  on: [RepeatOn]
  every: Int!
  interval: RepeatInterval!
}

input HabitGoalInput {
  count: Int!
  repeat: HabitRepeatInput!
  reminder: String
}

input CreateHabitLogInput {
  habitInstanceId: String!
  count: Int!
  date: DateTime
}

type Query {
  me: User
  user(id: String!): User

  habitStats(id: String!): HabitStats
}

type Mutation {
  createHabitDefinition(
    createHabitDefinitionInput: CreateHabitDefinitionInput
  ): HabitDefinition

  createHabitInstance(
    createHabitInstanceInput: CreateHabitInstanceInput
  ): GeneralResponse

  createHabitLog(createHabitLogInput: CreateHabitLogInput): GeneralResponse
}
